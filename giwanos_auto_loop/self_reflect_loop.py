import os
import json
from datetime import datetime

KPI_PATH = ".memory/feedback_kpi_latest.json"
ERROR_LOG_PATH = ".memory/loop_error_explanation.txt"
OUTPUT_SUMMARY = ".memory/self_reflection_summary.md"
ACTION_PLAN = ".memory/self_action_recommendation.json"
LOG_PATH = "logs/self_reflect.log"

os.makedirs(".memory", exist_ok=True)
os.makedirs("logs", exist_ok=True)

def load_kpi():
    if not os.path.exists(KPI_PATH):
        return None
    with open(KPI_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def load_errors():
    if not os.path.exists(ERROR_LOG_PATH):
        return []
    with open(ERROR_LOG_PATH, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def reflect(kpi, errors):
    summary = []
    decision = {
        "action": "continue",
        "reason": "ÏÑ±Í≥µÎ•† ÏñëÌò∏",
        "modifications": []
    }

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    summary.append(f"# üß† Self Reflection Summary ({now})\n")
    summary.append(f"Ï¥ù Ïã§Ìñâ: {kpi['Ï¥ù Ïã§Ìñâ']}")
    summary.append(f"ÏÑ±Í≥µ: {kpi['ÏÑ±Í≥µ']}")
    summary.append(f"Ïã§Ìå®: {kpi['Ïã§Ìå®']}")
    summary.append(f"ÏÑ±Í≥µÎ•†: {kpi['ÏÑ±Í≥µÎ•†']}%\n")

    if errors:
        summary.append("## Ï£ºÏöî Ïò§Î•ò:")
        for err in errors[-3:]:
            summary.append(f"- {err}")
        summary.append("")

    if kpi["ÏÑ±Í≥µÎ•†"] < 80:
        decision["action"] = "modify"
        decision["reason"] = "ÏÑ±Í≥µÎ•† Ï†ÄÌïò"
        decision["modifications"].append({
            "target": "loop_launcher.py",
            "suggest": "Ïã§Ìå® Î£®ÌîÑ Ï†úÍ±∞ ÎòêÎäî Ïû¨Ï†ïÎ†¨"
        })

    if any("Permission denied" in e for e in errors):
        decision["action"] = "alert"
        decision["reason"] = "Ïã§Ìñâ Í∂åÌïú Ïò§Î•ò"
        decision["modifications"].append({
            "target": "execution_env",
            "suggest": "ÌååÏùº Ïã§Ìñâ Í∂åÌïú ÌôïÏù∏ ÌïÑÏöî"
        })

    return "\n".join(summary), decision

def write_logs(text, action):
    with open(OUTPUT_SUMMARY, "w", encoding="utf-8") as f:
        f.write(text)
    with open(ACTION_PLAN, "w", encoding="utf-8") as f:
        json.dump(action, f, ensure_ascii=False, indent=2)
    with open(LOG_PATH, "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] Self-reflect executed\n")

def main():
    kpi = load_kpi()
    errors = load_errors()
    if not kpi:
        print("‚ùå KPI Ï†ïÎ≥¥ ÏóÜÏùå")
        return
    summary_text, decision = reflect(kpi, errors)
    write_logs(summary_text, decision)
    print("‚úÖ Self Reflect Î£®ÌîÑ ÏôÑÎ£å")

if __name__ == "__main__":
    main()